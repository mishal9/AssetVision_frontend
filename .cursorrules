# Coding guidelines

- My project's programming language is TypeScript
- Always add documentation when creating new functions and classes
- Use Tailwind CSS for styling
- Use Shadcn UI for components
- Use Redux for state management
- Use Socket.io for real-time communication
- Use ESLint for code quality
- Use Next.js for server-side rendering
- Always use strongly typed interfaces and types
- While debugging don't end up creating too many files, rather use the existing ones and add new ones only if necessary


# Project structure

/src
├── /components
│ ├── /ui (shadcn base components)
│ ├── /dashboard
│ ├── /portfolio
│ ├── /alerts
│ └── /charts
├── /pages
│ ├── Dashboard.tsx
│ ├── PortfolioDetail.tsx
│ ├── AlertsPage.tsx
│ └── TaxHarvesting.tsx
├── /services
│ ├── api.ts
│ ├── websocket.ts
│ └── auth.ts
├── /store
│ ├── index.ts
│ ├── portfolioSlice.ts
│ ├── alertsSlice.ts
│ └── userSlice.ts
├── /hooks
│ ├── useWebSocket.ts
│ └── usePortfolioData.ts
└── /utils
├── formatters.ts
└── calculations.ts

# Authentication Flow

## Implementation Strategy
- Create login/signup pages
- Implement JWT token management
- Set up protected routes
- Handle token refresh mechanisms
- Integrate with backend authentication system


## Implementation Strategy
- Implement code splitting
- Use React.memo and useMemo
- Optimize WebSocket payload
- Implement lazy loading
- Add error boundaries
- Create loading skeletons

## State Management
- Redux Toolkit Slices
- User authentication
- Portfolio data
- Performance metrics
- Alerts and notifications
- Tax harvesting opportunities

## Responsive Design
- Mobile-first approach
- Tailwind responsive utilities
- Adaptive layouts
- Touch-friendly interactions